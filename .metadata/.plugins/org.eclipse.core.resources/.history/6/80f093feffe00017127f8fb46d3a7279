package org.usfirst.frc.team4001.robot;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	Victor leftDrive = new Victor (0);
	Victor rightDrive = new Victor (1);
	/*
	Victor intake = new Victor (3);
	Victor armMotor = new Victor (2);
	Victor rotateMotor = new Victor (4);
	*/
	Joystick driver = new Joystick (0);
	double leftStickValue;
	double rightStickValue;
	RobotDrive drive;
	/*
	DigitalInput limitSwitch = new DigitalInput(0);
	DigitalInput rightSwitch = new DigitalInput(1);
	DigitalInput leftSwitch = new DigitalInput(2);
	Encoder shooterEncoder = new Encoder(2,1,false,Encoder.EncodingType.k4X);
	boolean ballIn=false;
	Timer timer;
	*/
	
	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	@Override
	public void robotInit() {
		drive = new RobotDrive (leftDrive, rightDrive);
		//timer= new Timer();
	}

	/**
	 * This autonomous (along with the chooser code above) shows how to select
	 * between different autonomous modes using the dashboard. The sendable
	 * chooser code works with the Java SmartDashboard. If you prefer the
	 * LabVIEW Dashboard, remove all of the chooser code and uncomment the
	 * getString line to get the auto name from the text box below the Gyro
	 *
	 * You can add additional auto modes by adding additional comparisons to the
	 * switch structure below with additional strings. If using the
	 * SendableChooser make sure to add them to the chooser code above as well.
	 */
	@Override
	public void autonomousInit() {
		//timer.reset();
		//timer.start();
	}

	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {
		if(timer.get()<10) {
			leftDrive.set(0.5);
			rightDrive.set(0.5);
		}
		else {
			leftDrive.set(0);
			rightDrive.set(0);
		}
		
	}

	/**
	 * This function is called periodically during operator control
	 */
	@Override
	public void teleopPeriodic() {
		leftStickValue = driver.getRawAxis(0);
		rightStickValue = driver.getRawAxis(1);
		drive.arcadeDrive(leftStickValue, rightStickValue);
		
		/*
		if(driver.getRawAxis(3) > 0) {
			if(limitSwitch.get()) {
				intake.set(0);
				ballIn=true;
			}
			else {
				intake.set(1);
			}
		}
		else if (driver.getRawAxis(3) > 0) {
			if (ballIn && shooterEncoder.getRate()>30000) {
				armMotor.set(-0.8);
				intake.set(1);
				if (limitSwitch.get()==false) {
					ballIn=false;
				}
			}
			else {
				armMotor.set(-1);
			}
		}
		else if (driver.getRawButton(6)) {
			if (rightSwitch.get()) {
				rotateMotor.set(0);			
			}
			else {
				rotateMotor.set(-0.15);
			}
		}
		else if (driver.getRawButton(5)) {
			if (leftSwitch.get()) {
				rotateMotor.set(0);
			}
			else {
				rotateMotor.set(0.15);
			}
		}
			
		else {
			armMotor.set(0);
			intake.set(0);
			rotateMotor.set(0);
		}
		*/	
	}
	
	/**
	 * This function is called periodically during test mode
	 */
	@Override
	public void testPeriodic() {
		LiveWindow.run();
	}
}

